group_front:
    - brain
    - face_left
    - face_right
    - ear_left
    - ear_right
    - neck
    - arm_left
    - arm_right
    - torso
    - abdomen
    - leg_left
    - leg_right
    - eye_left
    - eye_right
    - mouth
    - nose

# class LimbType(Enum):
#     UNSET = 0
#     RIGHT_ARM = 1
#     RIGHT_LEG = 2
#     LEFT_ARM = 3
#     LEFT_LEG = 4

# class BrainWalkData:
#     speaking_map = {"":0, "I do not have problems speaking":0, "I sometimes slur words but others don't seem to notice":1, "I often slur words and others notice":2, "I slur words so much that it interferes with my ability to have conversations":3, "I slur my words so much that others cannot understand me":4, "I cannot speak":5}
#     swallow_map = {"":0, "I do not have any problems swallowing liquids or foods":0, "I have problems swallowing liquids or solid foods":1, "I have frequent problems with swallowing and need a pureed diet":2, "I cannot swallow food or liquids":3}
#     hearing_map = {"":0, "I do not have problems hearing":0, "I have mild hearing loss on one side":1, "I have moderate or severe hearing loss on one side":2, "I have total hearing loss on both sides. I am effectively deaf.":3}
#     cognition_map = {"I have no problems with concentration or memory":0, "I have some concentration and memory problems, or problems with coping with stress, but I am able to handle my daily routines including completing this survey":1, "I have problems with concentration and memory that my friends and family notice; this is beginning to affect my daily routine. It makes completing this survey difficult":2, "I have severe impairment in my cognitive (thinking) abilities; for example, I sometimes forget where I am and who I am talking to. I need help completing this survey":3, "I have no meaningful conversation and am unable to handle my affairs because of my severe cognitive problems; I need someone else to complete this survey":4}
    
#     def __init__(self, row):
#         # create map with body part to dictionary of symptoms
#         self.patient_id = row['DeID']
#         self.initializeLimbData(row)
#         self.initializeHeadData(row)
#         self.initializeOtherData(row)

#     def getSummaryData(self):
#         return {'abdomen':self.getAbdomenSummary(),'brain':self.getBrainSummary(),'neck': self.getNeckSummary(),'ear_left':self.getHearingSummary(),'ear_right':self.getHearingSummary(),'head_right': self.right_face.getHeadDataIssues(),'head_left':self.left_face.getHeadDataIssues(),
#                 'leg_left':self.left_leg.getLimbDataIssues(),'leg_right':self.right_leg.getLimbDataIssues(),'arm_left':self.left_arm.getLimbDataIssues(),'arm_right':self.right_arm.getLimbDataIssues()}

#     def initializeHeadData(self,row):
#         self.right_face = HeadData(row,Side.RIGHT)
#         self.left_face = HeadData(row,Side.LEFT)

#     def initializeLimbData(self,row):
#         self.right_arm = LimbData(row, LimbType.RIGHT_ARM)
#         self.left_arm = LimbData(row, LimbType.LEFT_ARM)
#         self.right_leg = LimbData(row, LimbType.RIGHT_LEG)
#         self.left_leg = LimbData(row,LimbType.LEFT_LEG)

#     def initializeOtherData(self,row):
#         self.speaking = round(self.getSpeakingScore(row),2)
#         self.swallow = round(self.getSwallowScore(row),2)
#         self.hearing = round(self.getHearingScore(row),2)
#         self.cognition = round(self.getCognitionScore(row),2)
#         self.bowel_bladder = round(self.getBowelBladderScore(row),2)
#         self.fatigue = round(self.getFatigueScore(row),2)

#     def getBrainSummary(self):
#         if self.cognition == 0 and self.fatigue == 0:
#             return ""
#         return "Cognition: " + str(self.cognition) + " Fatigue: " + str(self.fatigue)
    
#     def getAbdomenSummary(self):
#         if self.bowel_bladder == 0:
#             return ""
#         return "Bowel Bladder Score: " + str(self.bowel_bladder)
    
#     def getHearingSummary(self):
#         if self.hearing == 0:
#             return ""
#         return "Hearing: " + str(self.hearing)

#     def getNeckSummary(self):
#         if self.swallow == 0:
#             return ""
#         return "Swallow: " + str(self.swallow)
    
#     def getFatigueScore(self,row):
#         f = "mfis_score"
#         if f not in row.keys():
#             return 0
#         return int(row[f])/84

#     def getBowelBladderScore(self,row):
#         b = "bowel_bladder_total_score"
#         if b not in row.keys():
#             return 0
#         return int(row[b])/4
    
#     def getHearingScore(self,row):
#         hr = "hearing"
#         if hr not in row.keys():
#             return 0
#         return self.hearing_map[row[hr]]/(len(self.hearing_map.keys())-1)
    
#     def getSwallowScore(self,row):
#         sw = "swallow"
#         if sw not in row.keys():
#             return 0
#         return self.swallow_map[row[sw]]/(len(self.swallow_map.keys())-1)
    
#     def getSpeakingScore(self,row):
#         sp = "speak"
#         if sp not in row.keys():
#             return 0
#         return self.speaking_map[row[sp]]/(len(self.speaking_map.keys())-1)
    
#     def getCognitionScore(self,row):
#         cog = "cognition"
#         if cog not in row.keys():
#             return 0
#         return self.cognition_map[row[cog]]/(len(self.cognition_map.keys())-1)

# class HeadData:
#     weakness_map = {"":0,"I do not have muscle weakness in my face":0, "A little, such as when I furrow my eyebrows or laugh":1,"A lot, such as trouble with drooling or when closing my eye(s)":2,"Total weakness or palsy, such as Bell's palsy":3}     
#     feeling_map = {"":0, "Feeling is very good. No numbness or pain":0, "Feeling is good. Some numbness":1, "Feeling is fair. Hard to tell sharp touch from dull touch":2, "Feeling is poor. Mild pain":3, "Feeling is very poor or gone. Moderate to severe pain":4}
#     vision_map = {"":0, "I have no problems with my ability to see.":0, "My vision is slightly impaired":1, "My vision is very impaired":2, "I am blind, or almost blind, in that eye":3}
#     def __init__(self,row,side):
#         self.side = side
#         self.populateScores(row, side)

#     def getHeadDataIssues(self):
#         if self.getMaxScore() == 0:
#             return ""
#         side = "FACE_LEFT" if self.side == Side.LEFT else "FACE_RIGHT"
#         headdataissues = side + ":\n "
#         if self.weakness > 0:
#             headdataissues += "Weakness: " + str(self.weakness) + " "
#         if self.feeling > 0:
#             headdataissues += "Feeling: " + str(self.feeling) + " "
#         if self.vision > 0:
#             headdataissues += "Vision: " + str(self.vision) + " "
#         return headdataissues

    
#     def populateScores(self,row,side):
#         self.weakness = round(self.getWeaknessScore(row,side),2)
#         self.feeling = round(self.getFeelingScore(row,side),2)
#         self.vision = round(self.getVisionScore(row,side),2)
    
#     def getWeaknessScore(self,row,side):
#         field = "lt_face" if side == Side.LEFT else "rt_face"
#         if field not in row.keys():
#             return 0
#         return self.weakness_map[row[field]]/(len(self.weakness_map.keys())-1)

#     def getFeelingScore(self,row,side):
#         field = "feeling_lt" if side == Side.LEFT else "feeling_rt"
#         if field not in row.keys():
#             return 0
#         return self.feeling_map[row[field]]/(len(self.feeling_map.keys())-1)
    
#     def getVisionScore(self,row,side):
#         field = "visioin_lt" if side == Side.LEFT else "vision_rt"
#         if field not in row.keys():
#             return 0
#         return self.vision_map[row[field]]/(len(self.vision_map.keys())-1)
    
#     def getMaxScore(self):
#         return max(self.vision,self.feeling,self.weakness)

# class LimbData:
#     impairment_map = {"":0,"Feeling is very good - No problems": 0, "Feeling is mildly impaired": 1, "Feeling is clearly impaired": 2, "Feeling is very poor or completely gone": 3}
#     strength_map = {"":0,"I can easily raise it and keep it raised":0, "I can raise it, but have mild or occasional trouble with my full strength": 1, "I have to make some effort to raise it": 2, "I can barely raise it": 3, "I can move my limb, but I cannot raise it": 4, "I cannot move it at all":5}
#     tremor_map = {"":0,"I do not have tremors or coordination problems":0, "Rarely make it hard for me to use":1, "Sometimes make it hard for me to use":2, "Often make it hard for me to use":3, "Always make it hard for me to use":4}
#     spasm_map = {"":0,"I do not have stiffness or spasms":0, "Mild, does not make it hard for me to use":1, "Moderate stiffness, but with effort I can use":2, "Sometimes I cannot overcome the stiffness to use my arm or leg":3, "My arm or leg is so contracted that I cannot use it at all":4}

#     def __init__(self, row, limb_type):
#         self.limb_type = limb_type
#         self.populateScores(row, limb_type)

#     def getLimbDataIssues(self):
#         if self.getMaxScore() == 0:
#             return ""
#         side = self.limb_type.name 
#         headdataissues = side + ":\n "
#         if self.strength > 0:
#             headdataissues += "Strength: " + str(self.strength) + " "
#         if self.tremor > 0:
#             headdataissues += "Tremor: " + str(self.tremor) + " "
#         if self.impairment > 0:
#             headdataissues += "Feeling: " + str(self.impairment) + " "
#         if self.spasm > 0:
#             headdataissues += "Spasm: " + str(self.spasm) + " "
#         return headdataissues

#     def getImpairmentScore(self, row, field):
#         if field not in row.keys():
#             return 0
#         return round(self.impairment_map[row[field]]/(len(self.impairment_map.keys())-1),2)
    
#     def getStrengthScore(self, row, field):
#         if field not in row.keys():
#             return 0
#         return round(self.strength_map[row[field]]/(len(self.strength_map.keys())-1),2)
    
#     def getSpasmScore(self, row, field):
#         if field not in row.keys():
#             return 0
#         return round(self.spasm_map[row[field]] / (len(self.spasm_map.keys()) - 1),2)
        
#     def getTremorScore(self, row, field):
#         if field not in row.keys():
#             return 0
#         return round(self.tremor_map[row[field]] / (len(self.tremor_map.keys()) - 1),2)
        
#     def populateScores(self,row, limbtype):
#         if limbtype == LimbType.RIGHT_ARM:
#             self.impairment = self.getImpairmentScore(row,'right_arm')
#             self.strength = self.getStrengthScore(row,'strength_rt_arm')
#             self.spasm = self.getSpasmScore(row,'spasm_rt_arm')
#             self.tremor = self.getTremorScore(row,'tremor_arms')
#         elif limbtype == LimbType.LEFT_ARM:
#             self.impairment = self.getImpairmentScore(row,'left_arm')
#             self.strength = self.getStrengthScore(row,'strength_lt_arm')
#             self.spasm = self.getSpasmScore(row,'spasm_lt_arm')
#             self.tremor = self.getTremorScore(row,'tremor_arms')
#         elif limbtype == LimbType.RIGHT_LEG:
#             self.impairment = self.getImpairmentScore(row,'right_leg')
#             self.strength = self.getStrengthScore(row,'strength_rt_leg')
#             self.spasm = self.getSpasmScore(row,'spasm_rt_leg')
#             self.tremor = self.getTremorScore(row,'tremor_legs')
#         elif limbtype == LimbType.LEFT_LEG:
#             self.impairment = self.getImpairmentScore(row,'left_leg')
#             self.strength = self.getStrengthScore(row,'strength_lt_leg')
#             self.spasm = self.getSpasmScore(row,'spasm_lt_leg')
#             self.tremor = self.getTremorScore(row,'tremor_legs')
            
#     def getMaxScore(self):
#         return max(self.tremor,self.impairment,self.spasm,self.strength)
